Chunk ID,Text Chunk,Summary,Relevance Score
1,"BERT: Pre-training of Deep Bidirectional Transformers for
Language Understanding
Jacob Devlin Ming-Wei Chang Kenton Lee Kristina Toutanova
Google AI Language
{jacobdevlin,mingweichang,kentonl,kristout}@google.com
Abstract
We introduce a new language representa-
tion model called BERT, which stands for
Bidirectional Encoder Representations from
Transformers. Unlike recent language repre-
sentation models (Peters et al., 2018a; Rad-
ford et al., 2018), BERT is designed to pre-
train deep bidirectional representations from
unlabeled text by jointly conditioning on both
left and right context in all layers. As a re-
sult, the pre-trained BERT model can be ﬁne-
tuned with just one additional output layer
to create state-of-the-art models for a wide
range of tasks, such as question answering and
language inference, without substantial task-
speciﬁc architecture modiﬁcations.
BERT is conceptually simple and empirically
powerful. It obtains new state-of-the-art re-
sults on eleven natural language processing
tasks, including pushing the GLUE score to
80.5% (7.7% point absolute improvement),
MultiNLI accuracy to 86.7% (4.6% absolute
improvement), SQuAD v1.1 question answer-
ing Test F1 to 93.2 (1.5 point absolute im-
provement) and SQuAD v2.0 Test F1 to 83.1
(5.1 point absolute improvement).
1 Introduction
Language model pre-training has been shown to
be effective for improving many natural language
processing tasks (Dai and Le, 2015; Peters et al.,","• BERT stands for Bidirectional Encoder Representations from Transformers.
• The model is designed to pre-train deep bidirectional representations from unlabeled text.
• It jointly conditions on both left and right context in all layers.
• A pre-trained BERT model can be fine-tuned with one additional output layer.
• BERT achieves state-of-the-art results on various natural language processing tasks:
  • GLUE score: 80.5% (7.7% point absolute improvement)
  • MultiNLI accuracy: 86.7% (4.6% absolute improvement)
  • SQuAD v1.1 question answering Test F1: 93.2% (1.5 point absolute improvement)
  • SQuAD v2.0 question answering Test F1: 83.1% (5.1 point absolute improvement)",4.0
2,"be effective for improving many natural language
processing tasks (Dai and Le, 2015; Peters et al.,
2018a; Radford et al., 2018; Howard and Ruder,
2018). These include sentence-level tasks such as
natural language inference (Bowman et al., 2015;
Williams et al., 2018) and paraphrasing (Dolan
and Brockett, 2005), which aim to predict the re-
lationships between sentences by analyzing them
holistically, as well as token-level tasks such as
named entity recognition and question answering,
where models are required to produce ﬁne-grained
output at the token level (Tjong Kim Sang and
De Meulder, 2003; Rajpurkar et al., 2016).
There are two existing strategies for apply-
ing pre-trained language representations to down-
stream tasks: feature-based and ﬁne-tuning. The
feature-based approach, such as ELMo (Peters
et al., 2018a), uses task-speciﬁc architectures that
include the pre-trained representations as addi-
tional features. The ﬁne-tuning approach, such as
the Generative Pre-trained Transformer (OpenAI
GPT) (Radford et al., 2018), introduces minimal
task-speciﬁc parameters, and is trained on the
downstream tasks by simply ﬁne-tuning all pre-
trained parameters. The two approaches share the
same objective function during pre-training, where
they use unidirectional language models to learn
general language representations.
We argue that current techniques restrict the
power of the pre-trained representations, espe-
cially for the ﬁne-tuning approaches. The ma-","• BERT architecture has been shown to be effective for various natural language processing tasks such as sentence-level and token-level tasks.
• Examples of tasks include natural language inference, paraphrasing, named entity recognition, and question answering.
• There are two existing strategies for applying pre-trained language representations: feature-based and fine-tuning.
• The feature-based approach uses task-specific architectures with additional features, while the fine-tuning approach introduces minimal task-specific parameters and trains all pre-trained parameters on downstream tasks.",4.0
3,"power of the pre-trained representations, espe-
cially for the ﬁne-tuning approaches. The ma-
jor limitation is that standard language models are
unidirectional, and this limits the choice of archi-
tectures that can be used during pre-training. For
example, in OpenAI GPT, the authors use a left-to-
right architecture, where every token can only at-
tend to previous tokens in the self-attention layers
of the Transformer (Vaswani et al., 2017). Such re-
strictions are sub-optimal for sentence-level tasks,
and could be very harmful when applying ﬁne-
tuning based approaches to token-level tasks such
as question answering, where it is crucial to incor-
porate context from both directions.
In this paper, we improve the ﬁne-tuning based
approaches by proposing BERT: Bidirectional
Encoder Representations from Transformers.
BERT alleviates the previously mentioned unidi-
rectionality constraint by using a “masked lan-
guage model” (MLM) pre-training objective, in-
spired by the Cloze task (Taylor, 1953). The
masked language model randomly masks some of
the tokens from the input, and the objective is to
predict the original vocabulary id of the masked
arXiv:1810.04805v2  [cs.CL]  24 May 2019","• BERT (Bidirectional Encoder Representations from Transformers) improves fine-tuning approaches by alleviating unidirectionality constraints.
• Standard language models are unidirectional, limiting architecture choices during pre-training.
• BERT uses a ""masked language model"" pre-training objective inspired by the Cloze task to address this limitation.
• The objective randomly masks tokens and predicts the original vocabulary id of the masked token.",4.0
6,"2018a) generalize traditional word embedding re-
search along a different dimension. They extract
context-sensitive features from a left-to-right and a
right-to-left language model. The contextual rep-
resentation of each token is the concatenation of
the left-to-right and right-to-left representations.
When integrating contextual word embeddings
with existing task-speciﬁc architectures, ELMo
advances the state of the art for several major NLP
benchmarks (Peters et al., 2018a) including ques-
tion answering (Rajpurkar et al., 2016), sentiment
analysis (Socher et al., 2013), and named entity
recognition (Tjong Kim Sang and De Meulder,
2003). Melamud et al. (2016) proposed learning
contextual representations through a task to pre-
dict a single word from both left and right context
using LSTMs. Similar to ELMo, their model is
feature-based and not deeply bidirectional. Fedus
et al. (2018) shows that the cloze task can be used
to improve the robustness of text generation mod-
els.
2.2 Unsupervised Fine-tuning Approaches
As with the feature-based approaches, the ﬁrst
works in this direction only pre-trained word em-
bedding parameters from unlabeled text (Col-
lobert and Weston, 2008).
More recently, sentence or document encoders
which produce contextual token representations
have been pre-trained from unlabeled text and
ﬁne-tuned for a supervised downstream task (Dai
and Le, 2015; Howard and Ruder, 2018; Radford
et al., 2018). The advantage of these approaches","Here is the summary in bullet points:

• BERT architecture extracts context-sensitive features from both left-to-right and right-to-left language models.
• ELMo advances the state of the art for several major NLP benchmarks, including question answering, sentiment analysis, and named entity recognition.
• Melamud et al. (2016) proposed learning contextual representations using LSTMs and feature-based approach.
• Fedus et al. (2018) used cloze task to improve the robustness of text generation models.
• Sentence or document encoders produce contextual token representations pre-trained from unlabeled text and fine-tuned for supervised downstream tasks.",4.0
8,"BERT BERT
E[CLS] E1  E[SEP]... EN E1’ ... EM’
C
 T1
 T[SEP]...
 TN
 T1’ ...
 TM’
[CLS] Tok 1  [SEP]... Tok N Tok 1 ... TokM
Question Paragraph
Start/End Span
BERT
E[CLS] E1  E[SEP]... EN E1’ ... EM’
C
 T1
 T[SEP]...
 TN
 T1’ ...
 TM’
[CLS] Tok 1  [SEP]... Tok N Tok 1 ... TokM
Masked Sentence A Masked Sentence B
Pre-training Fine-Tuning
NSP Mask LM Mask LM
Unlabeled Sentence A and B Pair 
SQuAD
Question Answer Pair
NERMNLI
Figure 1: Overall pre-training and ﬁne-tuning procedures for BERT. Apart from output layers, the same architec-
tures are used in both pre-training and ﬁne-tuning. The same pre-trained model parameters are used to initialize
models for different down-stream tasks. During ﬁne-tuning, all parameters are ﬁne-tuned. [CLS] is a special
symbol added in front of every input example, and [SEP] is a special separator token (e.g. separating ques-
tions/answers).
ing and auto-encoder objectives have been used
for pre-training such models (Howard and Ruder,
2018; Radford et al., 2018; Dai and Le, 2015).
2.3 Transfer Learning from Supervised Data
There has also been work showing effective trans-
fer from supervised tasks with large datasets, such
as natural language inference (Conneau et al.,
2017) and machine translation (McCann et al.,
2017). Computer vision research has also demon-
strated the importance of transfer learning from
large pre-trained models, where an effective recipe
is to ﬁne-tune models pre-trained with Ima-","Here is a summary of the main content related to BERT Architecture and Applications in bullet points:

• BERT uses [CLS], [SEP], E1', EM' as special tokens for CLS, separator, and end-of-sentence markers.
• BERT pre-training objectives include:
  + Masked Language Modeling (MLM)
  + Next Sentence Prediction (NSP)
  + Sentence Ordering Prediction
• BERT fine-tuning involves adjusting only output layers while keeping the rest of the model parameters the same.
• Applications include:
  + SQuAD question answering pairs
  + NER (named entity recognition) tasks
  + MNLI (multinomial classification)",4.0
9,"large pre-trained models, where an effective recipe
is to ﬁne-tune models pre-trained with Ima-
geNet (Deng et al., 2009; Yosinski et al., 2014).
3 BERT
We introduce BERT and its detailed implementa-
tion in this section. There are two steps in our
framework: pre-training and ﬁne-tuning. Dur-
ing pre-training, the model is trained on unlabeled
data over different pre-training tasks. For ﬁne-
tuning, the BERT model is ﬁrst initialized with
the pre-trained parameters, and all of the param-
eters are ﬁne-tuned using labeled data from the
downstream tasks. Each downstream task has sep-
arate ﬁne-tuned models, even though they are ini-
tialized with the same pre-trained parameters. The
question-answering example in Figure 1 will serve
as a running example for this section.
A distinctive feature of BERT is its uniﬁed ar-
chitecture across different tasks. There is mini-
mal difference between the pre-trained architec-
ture and the ﬁnal downstream architecture.
Model Architecture BERT’s model architec-
ture is a multi-layer bidirectional Transformer en-
coder based on the original implementation de-
scribed in Vaswani et al. (2017) and released in
the tensor2tensor library.1 Because the use
of Transformers has become common and our im-
plementation is almost identical to the original,
we will omit an exhaustive background descrip-
tion of the model architecture and refer readers to
Vaswani et al. (2017) as well as excellent guides
such as “The Annotated Transformer.”2","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• BERT framework consists of two steps: pre-training and fine-tuning.
• Pre-training involves training the model on unlabeled data over different tasks.
• Fine-tuning uses labeled data from downstream tasks to adjust the pre-trained parameters.
• Each downstream task has a separate fine-tuned model, initialized with the same pre-trained parameters.
• BERT's architecture is a multi-layer bidirectional Transformer encoder based on Vaswani et al. (2017).
• The model is identical in both pre-training and downstream architectures.",4.0
10,"Vaswani et al. (2017) as well as excellent guides
such as “The Annotated Transformer.”2
In this work, we denote the number of layers
(i.e., Transformer blocks) as L, the hidden size as
H, and the number of self-attention heads as A.3
We primarily report results on two model sizes:
BERTBASE (L=12, H=768, A=12, Total Param-
eters=110M) and BERTLARGE (L=24, H=1024,
A=16, Total Parameters=340M).
BERTBASE was chosen to have the same model
size as OpenAI GPT for comparison purposes.
Critically, however, the BERT Transformer uses
bidirectional self-attention, while the GPT Trans-
former uses constrained self-attention where every
token can only attend to context to its left.4
1https://github.com/tensorﬂow/tensor2tensor
2http://nlp.seas.harvard.edu/2018/04/03/attention.html
3In all cases we set the feed-forward/ﬁlter size to be 4H,
i.e., 3072 for the H = 768and 4096 for the H = 1024.
4We note that in the literature the bidirectional Trans-","Here is a summary of the main content related to ""BERT Architecture and Applications"" in bullet points:

• BERTBASE (L=12, H=768, A=12) and BERTLARGE (L=24, H=1024, A=16) model sizes reported.
• BERT uses bidirectional self-attention, while GPT uses constrained self-attention.
• Feed-forward/filter size set to 4H in both models.
• BERTBASE has the same model size as OpenAI GPT for comparison purposes.",4.0
11,"Input/Output Representations To make BERT
handle a variety of down-stream tasks, our input
representation is able to unambiguously represent
both a single sentence and a pair of sentences
(e.g., ⟨Question, Answer ⟩) in one token sequence.
Throughout this work, a “sentence” can be an arbi-
trary span of contiguous text, rather than an actual
linguistic sentence. A “sequence” refers to the in-
put token sequence to BERT, which may be a sin-
gle sentence or two sentences packed together.
We use WordPiece embeddings (Wu et al.,
2016) with a 30,000 token vocabulary. The ﬁrst
token of every sequence is always a special clas-
siﬁcation token ( [CLS]). The ﬁnal hidden state
corresponding to this token is used as the ag-
gregate sequence representation for classiﬁcation
tasks. Sentence pairs are packed together into a
single sequence. We differentiate the sentences in
two ways. First, we separate them with a special
token ([SEP]). Second, we add a learned embed-
ding to every token indicating whether it belongs
to sentence A or sentence B. As shown in Figure 1,
we denote input embedding as E, the ﬁnal hidden
vector of the special [CLS] token as C ∈RH,
and the ﬁnal hidden vector for the ith input token
as Ti ∈RH.
For a given token, its input representation is
constructed by summing the corresponding token,
segment, and position embeddings. A visualiza-
tion of this construction can be seen in Figure 2.
3.1 Pre-training BERT
Unlike Peters et al. (2018a) and Radford et al.","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• The input representation for BERT can unambiguously represent single sentences, pairs of sentences, or arbitrary spans of contiguous text.
• A sequence refers to the input token sequence to BERT, which may be a single sentence or two sentences packed together.
• WordPiece embeddings with a 30,000 token vocabulary are used.
• The first token of every sequence is a special classification token ([CLS]), and its final hidden state is used as the aggregate sequence representation for classification tasks.
• Sentence pairs are packed together into a single sequence using either a special token ([SEP]) or learned embedding.
• Input embeddings are constructed by summing token, segment, and position embeddings.",4.0
12,"3.1 Pre-training BERT
Unlike Peters et al. (2018a) and Radford et al.
(2018), we do not use traditional left-to-right or
right-to-left language models to pre-train BERT.
Instead, we pre-train BERT using two unsuper-
vised tasks, described in this section. This step
is presented in the left part of Figure 1.
Task #1: Masked LM Intuitively, it is reason-
able to believe that a deep bidirectional model is
strictly more powerful than either a left-to-right
model or the shallow concatenation of a left-to-
right and a right-to-left model. Unfortunately,
standard conditional language models can only be
trained left-to-right or right-to-left, since bidirec-
tional conditioning would allow each word to in-
directly “see itself”, and the model could trivially
predict the target word in a multi-layered context.
former is often referred to as a “Transformer encoder” while
the left-context-only version is referred to as a “Transformer
decoder” since it can be used for text generation.
In order to train a deep bidirectional representa-
tion, we simply mask some percentage of the input
tokens at random, and then predict those masked
tokens. We refer to this procedure as a “masked
LM” (MLM), although it is often referred to as a
Cloze task in the literature (Taylor, 1953). In this
case, the ﬁnal hidden vectors corresponding to the
mask tokens are fed into an output softmax over
the vocabulary, as in a standard LM. In all of our
experiments, we mask 15% of all WordPiece to-","* BERT is pre-trained using two unsupervised tasks: Masked LM and other tasks.
* Masked LM involves masking some percentage of input tokens at random and predicting those masked tokens.
* The procedure is referred to as a ""masked LM"" or Cloze task in the literature.
* The final hidden vectors corresponding to mask tokens are fed into an output softmax over the vocabulary.",4.0
13,"the vocabulary, as in a standard LM. In all of our
experiments, we mask 15% of all WordPiece to-
kens in each sequence at random. In contrast to
denoising auto-encoders (Vincent et al., 2008), we
only predict the masked words rather than recon-
structing the entire input.
Although this allows us to obtain a bidirec-
tional pre-trained model, a downside is that we
are creating a mismatch between pre-training and
ﬁne-tuning, since the [MASK] token does not ap-
pear during ﬁne-tuning. To mitigate this, we do
not always replace “masked” words with the ac-
tual [MASK] token. The training data generator
chooses 15% of the token positions at random for
prediction. If the i-th token is chosen, we replace
the i-th token with (1) the [MASK] token 80% of
the time (2) a random token 10% of the time (3)
the unchanged i-th token 10% of the time. Then,
Ti will be used to predict the original token with
cross entropy loss. We compare variations of this
procedure in Appendix C.2.
Task #2: Next Sentence Prediction (NSP)
Many important downstream tasks such as Ques-
tion Answering (QA) and Natural Language Infer-
ence (NLI) are based on understanding the rela-
tionship between two sentences, which is not di-
rectly captured by language modeling. In order
to train a model that understands sentence rela-
tionships, we pre-train for a binarized next sen-
tence prediction task that can be trivially gener-
ated from any monolingual corpus. Speciﬁcally,","Here is the summary of the ""BERT Architecture and Applications"" section in bullet points:

• BERT architecture predicts masked words in sequences, rather than reconstructing the entire input.
• The model uses a mix of [MASK] tokens, random tokens, and unchanged original tokens for prediction.
• A cross-entropy loss function is used to predict the original token.
• The training data generator chooses 15% of token positions at random for prediction, with different probabilities for each type of token.",4.0
15,"[CLS] he likes play ##ing [SEP]my dog is cute [SEP]Input
E[CLS] Ehe Elikes Eplay E##ing E[SEP]Emy Edog Eis Ecute E[SEP]
Token
Embeddings
EA EB EB EB EB EBEA EA EA EA EASegment
Embeddings
E0 E6 E7 E8 E9 E10E1 E2 E3 E4 E5Position
Embeddings
Figure 2: BERT input representation. The input embeddings are the sum of the token embeddings, the segmenta-
tion embeddings and the position embeddings.
The NSP task is closely related to representation-
learning objectives used in Jernite et al. (2017) and
Logeswaran and Lee (2018). However, in prior
work, only sentence embeddings are transferred to
down-stream tasks, where BERT transfers all pa-
rameters to initialize end-task model parameters.
Pre-training data The pre-training procedure
largely follows the existing literature on language
model pre-training. For the pre-training corpus we
use the BooksCorpus (800M words) (Zhu et al.,
2015) and English Wikipedia (2,500M words).
For Wikipedia we extract only the text passages
and ignore lists, tables, and headers. It is criti-
cal to use a document-level corpus rather than a
shufﬂed sentence-level corpus such as the Billion
Word Benchmark (Chelba et al., 2013) in order to
extract long contiguous sequences.
3.2 Fine-tuning BERT
Fine-tuning is straightforward since the self-
attention mechanism in the Transformer al-
lows BERT to model many downstream tasks—
whether they involve single text or text pairs—by
swapping out the appropriate inputs and outputs.","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• BERT's architecture combines token embeddings, segmentations, and position embeddings to create input representations.
• The NSP task is related to representation-learning objectives used in Jernite et al. (2017) and Logeswaran and Lee (2018).
• BERT transfers all pre-trained parameters to initialize end-task model parameters, unlike previous work which only transferred sentence embeddings.
• Pre-training data includes the BooksCorpus (800M words) and English Wikipedia (2,500M words), with a focus on long contiguous sequences from document-level corpora.
• Fine-tuning is straightforward due to BERT's self-attention mechanism, allowing it to model multiple downstream tasks by swapping inputs and outputs.",4.0
16,"whether they involve single text or text pairs—by
swapping out the appropriate inputs and outputs.
For applications involving text pairs, a common
pattern is to independently encode text pairs be-
fore applying bidirectional cross attention, such
as Parikh et al. (2016); Seo et al. (2017). BERT
instead uses the self-attention mechanism to unify
these two stages, as encoding a concatenated text
pair with self-attention effectively includes bidi-
rectional cross attention between two sentences.
For each task, we simply plug in the task-
speciﬁc inputs and outputs into BERT and ﬁne-
tune all the parameters end-to-end. At the in-
put, sentence A and sentence B from pre-training
are analogous to (1) sentence pairs in paraphras-
ing, (2) hypothesis-premise pairs in entailment, (3)
question-passage pairs in question answering, and
(4) a degenerate text- ∅ pair in text classiﬁcation
or sequence tagging. At the output, the token rep-
resentations are fed into an output layer for token-
level tasks, such as sequence tagging or question
answering, and the [CLS] representation is fed
into an output layer for classiﬁcation, such as en-
tailment or sentiment analysis.
Compared to pre-training, ﬁne-tuning is rela-
tively inexpensive. All of the results in the pa-
per can be replicated in at most 1 hour on a sin-
gle Cloud TPU, or a few hours on a GPU, starting
from the exact same pre-trained model. 7 We de-
scribe the task-speciﬁc details in the correspond-","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• BERT uses self-attention mechanism to unify encoding and bidirectional cross attention.
• For text pairs, BERT encodes concatenated texts with self-attention, including bidirectional cross attention between sentences.
• BERT fine-tunes parameters end-to-end for each task by plugging in task-specific inputs and outputs.
• Pre-trained BERT model can be used as input for various tasks such as paraphrasing, entailment, question answering, and text classification.
• Token representations are fed into output layers for token-level tasks (sequence tagging, question answering) and [CLS] representation is used for classification tasks (entailment, sentiment analysis).
• Fine-tuning BERT is relatively inexpensive compared to pre-training, with results replicable in a few hours on a GPU.",4.0
18,"System MNLI-(m/mm) QQP QNLI SST-2 CoLA STS-B MRPC RTE Average
392k 363k 108k 67k 8.5k 5.7k 3.5k 2.5k -
Pre-OpenAI SOTA 80.6/80.1 66.1 82.3 93.2 35.0 81.0 86.0 61.7 74.0
BiLSTM+ELMo+Attn 76.4/76.1 64.8 79.8 90.4 36.0 73.3 84.9 56.8 71.0
OpenAI GPT 82.1/81.4 70.3 87.4 91.3 45.4 80.0 82.3 56.0 75.1
BERTBASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6
BERTLARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1
Table 1: GLUE Test results, scored by the evaluation server ( https://gluebenchmark.com/leaderboard).
The number below each task denotes the number of training examples. The “Average” column is slightly different
than the ofﬁcial GLUE score, since we exclude the problematic WNLI set. 8 BERT and OpenAI GPT are single-
model, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and
accuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.
We use a batch size of 32 and ﬁne-tune for 3
epochs over the data for all GLUE tasks. For each
task, we selected the best ﬁne-tuning learning rate
(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.
Additionally, for BERTLARGE we found that ﬁne-
tuning was sometimes unstable on small datasets,
so we ran several random restarts and selected the
best model on the Dev set. With random restarts,
we use the same pre-trained checkpoint but per-
form different ﬁne-tuning data shufﬂing and clas-
siﬁer layer initialization.9","* BERT architecture is compared to other models in GLUE tasks.
* BERTBASE, BERTLARGE, and OpenAI GPT are single-model, single-task configurations.
* F1 scores are reported for QQP and MRPC, while Spearman correlations are used for STS-B.
* Accuracy scores are used for other tasks, excluding entries with BERT as a component.
* Batch size is 32, fine-tuning for 3 epochs over the data.
* Fine-tuning learning rate is selected among 5e-5, 4e-5, 3e-5, and 2e-5 on the Dev set.
* BERTLARGE model may experience unstable fine-tuning on small datasets, so random restarts are used.",4.0
19,"form different ﬁne-tuning data shufﬂing and clas-
siﬁer layer initialization.9
Results are presented in Table 1. Both
BERTBASE and BERTLARGE outperform all sys-
tems on all tasks by a substantial margin, obtaining
4.5% and 7.0% respective average accuracy im-
provement over the prior state of the art. Note that
BERTBASE and OpenAI GPT are nearly identical
in terms of model architecture apart from the at-
tention masking. For the largest and most widely
reported GLUE task, MNLI, BERT obtains a 4.6%
absolute accuracy improvement. On the ofﬁcial
GLUE leaderboard10, BERTLARGE obtains a score
of 80.5, compared to OpenAI GPT, which obtains
72.8 as of the date of writing.
We ﬁnd that BERT LARGE signiﬁcantly outper-
forms BERTBASE across all tasks, especially those
with very little training data. The effect of model
size is explored more thoroughly in Section 5.2.
4.2 SQuAD v1.1
The Stanford Question Answering Dataset
(SQuAD v1.1) is a collection of 100k crowd-
sourced question/answer pairs (Rajpurkar et al.,
2016). Given a question and a passage from
9The GLUE data set distribution does not include the Test
labels, and we only made a single GLUE evaluation server
submission for each of BERTBASE and BERTLARGE .
10https://gluebenchmark.com/leaderboard
Wikipedia containing the answer, the task is to
predict the answer text span in the passage.
As shown in Figure 1, in the question answer-
ing task, we represent the input question and pas-","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• BERTBASE and BERTLARGE outperform all systems on all tasks by a substantial margin.
• BERTBASE and OpenAI GPT have nearly identical model architectures apart from attention masking.
• BERTLARGE obtains significant improvements over BERTBASE, especially for tasks with little training data.
• BERTLARGE achieves an absolute accuracy improvement of 4.6% on the largest GLUE task (MNLI).
• BERTLARGE outperforms OpenAI GPT on the official GLUE leaderboard, achieving a score of 80.5 compared to 72.8.",4.0
20,"As shown in Figure 1, in the question answer-
ing task, we represent the input question and pas-
sage as a single packed sequence, with the ques-
tion using the A embedding and the passage using
the B embedding. We only introduce a start vec-
tor S ∈RH and an end vector E ∈RH during
ﬁne-tuning. The probability of word i being the
start of the answer span is computed as a dot prod-
uct between Ti and S followed by a softmax over
all of the words in the paragraph: Pi = eS·Ti
∑
j eS·Tj .
The analogous formula is used for the end of the
answer span. The score of a candidate span from
position ito position jis deﬁned as S·Ti + E·Tj,
and the maximum scoring span where j ≥ i is
used as a prediction. The training objective is the
sum of the log-likelihoods of the correct start and
end positions. We ﬁne-tune for 3 epochs with a
learning rate of 5e-5 and a batch size of 32.
Table 2 shows top leaderboard entries as well
as results from top published systems (Seo et al.,
2017; Clark and Gardner, 2018; Peters et al.,
2018a; Hu et al., 2018). The top results from the
SQuAD leaderboard do not have up-to-date public
system descriptions available,11 and are allowed to
use any public data when training their systems.
We therefore use modest data augmentation in
our system by ﬁrst ﬁne-tuning on TriviaQA (Joshi
et al., 2017) befor ﬁne-tuning on SQuAD.
Our best performing system outperforms the top
leaderboard system by +1.5 F1 in ensembling and
+1.3 F1 as a single system. In fact, our single","* BERT Architecture: The input question and passage are represented as a single packed sequence with question using A embedding and passage using B embedding.
* Fine-tuning is done for 3 epochs with a learning rate of 5e-5 and a batch size of 32.
* Training objective is the sum of the log-likelihoods of correct start and end positions.
* Data augmentation is used by fine-tuning on TriviaQA before SQuAD.",4.0
21,"leaderboard system by +1.5 F1 in ensembling and
+1.3 F1 as a single system. In fact, our single
BERT model outperforms the top ensemble sys-
tem in terms of F1 score. Without TriviaQA ﬁne-
11QANet is described in Yu et al. (2018), but the system
has improved substantially after publication.","* BERT architecture improves leaderboard performance by +1.5 F1 in ensembling and +1.3 F1 as a single system.
* A single BERT model outperforms the top ensemble system in terms of F1 score.
* The 11QANet system has improved substantially after publication, but its original description is from Yu et al. (2018).",4.0
22,"System Dev Test
EM F1 EM F1
Top Leaderboard Systems (Dec 10th, 2018)
Human - - 82.3 91.2
#1 Ensemble - nlnet - - 86.0 91.7
#2 Ensemble - QANet - - 84.5 90.5
Published
BiDAF+ELMo (Single) - 85.6 - 85.8
R.M. Reader (Ensemble) 81.2 87.9 82.3 88.5
Ours
BERTBASE (Single) 80.8 88.5 - -
BERTLARGE (Single) 84.1 90.9 - -
BERTLARGE (Ensemble) 85.8 91.8 - -
BERTLARGE (Sgl.+TriviaQA) 84.2 91.1 85.1 91.8
BERTLARGE (Ens.+TriviaQA) 86.2 92.2 87.4 93.2
Table 2: SQuAD 1.1 results. The BERT ensemble
is 7x systems which use different pre-training check-
points and ﬁne-tuning seeds.
System Dev Test
EM F1 EM F1
Top Leaderboard Systems (Dec 10th, 2018)
Human 86.3 89.0 86.9 89.5
#1 Single - MIR-MRC (F-Net) - - 74.8 78.0
#2 Single - nlnet - - 74.2 77.1
Published
unet (Ensemble) - - 71.4 74.9
SLQA+ (Single) - 71.4 74.4
Ours
BERTLARGE (Single) 78.7 81.9 80.0 83.1
Table 3: SQuAD 2.0 results. We exclude entries that
use BERT as one of their components.
tuning data, we only lose 0.1-0.4 F1, still outper-
forming all existing systems by a wide margin.12
4.3 SQuAD v2.0
The SQuAD 2.0 task extends the SQuAD 1.1
problem deﬁnition by allowing for the possibility
that no short answer exists in the provided para-
graph, making the problem more realistic.
We use a simple approach to extend the SQuAD
v1.1 BERT model for this task. We treat ques-
tions that do not have an answer as having an an-
swer span with start and end at the [CLS] to-
ken. The probability space for the start and end","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

* BERT (Bidirectional Encoder Representations from Transformers) achieves high performance in question answering tasks.
* BERT variants include:
  + BERTBASE
  + BERTLARGE
  + Ensemble version of BERTLARGE with different pre-training checkpoints and fine-tuning seeds
* BERT ensemble outperforms all existing systems by a wide margin, losing only 0.1-0.4 F1 when using different tuning data.
* BERT is used in SQuAD 2.0 task, where no short answer exists in the provided paragraph, making it more realistic.
* A simple approach is taken to extend the SQuAD v1.1 BERT model for this task by treating questions without an answer as having an answer span with start and end at the [CLS] token.",4.0
23,"swer span with start and end at the [CLS] to-
ken. The probability space for the start and end
answer span positions is extended to include the
position of the [CLS] token. For prediction, we
compare the score of the no-answer span: snull =
S·C+ E·C to the score of the best non-null span
12The TriviaQA data we used consists of paragraphs from
TriviaQA-Wiki formed of the ﬁrst 400 tokens in documents,
that contain at least one of the provided possible answers.
System Dev Test
ESIM+GloVe 51.9 52.7
ESIM+ELMo 59.1 59.2
OpenAI GPT - 78.0
BERTBASE 81.6 -
BERTLARGE 86.6 86.3
Human (expert)† - 85.0
Human (5 annotations)† - 88.0
Table 4: SW AG Dev and Test accuracies.†Human per-
formance is measured with 100 samples, as reported in
the SW AG paper.
ˆsi,j = maxj≥iS·Ti + E·Tj. We predict a non-null
answer when ˆsi,j > snull + τ, where the thresh-
old τ is selected on the dev set to maximize F1.
We did not use TriviaQA data for this model. We
ﬁne-tuned for 2 epochs with a learning rate of 5e-5
and a batch size of 48.
The results compared to prior leaderboard en-
tries and top published work (Sun et al., 2018;
Wang et al., 2018b) are shown in Table 3, exclud-
ing systems that use BERT as one of their com-
ponents. We observe a +5.1 F1 improvement over
the previous best system.
4.4 SWAG
The Situations With Adversarial Generations
(SW AG) dataset contains 113k sentence-pair com-
pletion examples that evaluate grounded common-
sense inference (Zellers et al., 2018). Given a sen-","• BERT architecture uses the CLS token as the start point for answer span prediction.
• The probability space for answer span positions is extended to include the [CLS] token position.
• The score of the no-answer span (snull) is compared to the best non-null span score to predict a non-null answer.
• The threshold τ is selected on the dev set to maximize F1 accuracy.
• BERTBASE and BERTLARGE outperformed other models in SW AG, with human performance exceeding BERT's accuracy.",4.0
24,"sense inference (Zellers et al., 2018). Given a sen-
tence, the task is to choose the most plausible con-
tinuation among four choices.
When ﬁne-tuning on the SW AG dataset, we
construct four input sequences, each containing
the concatenation of the given sentence (sentence
A) and a possible continuation (sentence B). The
only task-speciﬁc parameters introduced is a vec-
tor whose dot product with the [CLS] token rep-
resentation C denotes a score for each choice
which is normalized with a softmax layer.
We ﬁne-tune the model for 3 epochs with a
learning rate of 2e-5 and a batch size of 16. Re-
sults are presented in Table 4. BERT LARGE out-
performs the authors’ baseline ESIM+ELMo sys-
tem by +27.1% and OpenAI GPT by 8.3%.
5 Ablation Studies
In this section, we perform ablation experiments
over a number of facets of BERT in order to better
understand their relative importance. Additional","* BERT Architecture:
  + Fine-tuning on SW AG dataset for sense inference task
  + Input sequences created by concatenating given sentence and possible continuation
  + Task-specific parameters introduced: vector with dot product at [CLS] token representation
* Applications:
  + Outperforms baseline ESIM+ELMo system by +27.1%
  + Outperforms OpenAI GPT by 8.3%",4.0
27,"on ﬁne-tuning task accuracy. We trained a number
of BERT models with a differing number of layers,
hidden units, and attention heads, while otherwise
using the same hyperparameters and training pro-
cedure as described previously.
Results on selected GLUE tasks are shown in
Table 6. In this table, we report the average Dev
Set accuracy from 5 random restarts of ﬁne-tuning.
We can see that larger models lead to a strict ac-
curacy improvement across all four datasets, even
for MRPC which only has 3,600 labeled train-
ing examples, and is substantially different from
the pre-training tasks. It is also perhaps surpris-
ing that we are able to achieve such signiﬁcant
improvements on top of models which are al-
ready quite large relative to the existing literature.
For example, the largest Transformer explored in
Vaswani et al. (2017) is (L=6, H=1024, A=16)
with 100M parameters for the encoder, and the
largest Transformer we have found in the literature
is (L=64, H=512, A=2) with 235M parameters
(Al-Rfou et al., 2018). By contrast, BERT BASE
contains 110M parameters and BERT LARGE con-
tains 340M parameters.
It has long been known that increasing the
model size will lead to continual improvements
on large-scale tasks such as machine translation
and language modeling, which is demonstrated
by the LM perplexity of held-out training data
shown in Table 6. However, we believe that
this is the ﬁrst work to demonstrate convinc-
ingly that scaling to extreme model sizes also","* BERT models with varying numbers of layers, hidden units, and attention heads were trained for fine-tuning task accuracy.
* Larger models lead to a strict accuracy improvement across all four GLUE tasks.
* Even with limited training examples (3,600), larger models achieve significant improvements.
* The largest Transformer in the literature has 235M parameters, while BERT LARGE contains 340M parameters.",4.0
28,"this is the ﬁrst work to demonstrate convinc-
ingly that scaling to extreme model sizes also
leads to large improvements on very small scale
tasks, provided that the model has been sufﬁ-
ciently pre-trained. Peters et al. (2018b) presented","There is no text provided for summary. Please provide the actual text related to ""BERT Architecture and Applications"" for a summary.",4.0
29,"mixed results on the downstream task impact of
increasing the pre-trained bi-LM size from two
to four layers and Melamud et al. (2016) men-
tioned in passing that increasing hidden dimen-
sion size from 200 to 600 helped, but increasing
further to 1,000 did not bring further improve-
ments. Both of these prior works used a feature-
based approach — we hypothesize that when the
model is ﬁne-tuned directly on the downstream
tasks and uses only a very small number of ran-
domly initialized additional parameters, the task-
speciﬁc models can beneﬁt from the larger, more
expressive pre-trained representations even when
downstream task data is very small.
5.3 Feature-based Approach with BERT
All of the BERT results presented so far have used
the ﬁne-tuning approach, where a simple classiﬁ-
cation layer is added to the pre-trained model, and
all parameters are jointly ﬁne-tuned on a down-
stream task. However, the feature-based approach,
where ﬁxed features are extracted from the pre-
trained model, has certain advantages. First, not
all tasks can be easily represented by a Trans-
former encoder architecture, and therefore require
a task-speciﬁc model architecture to be added.
Second, there are major computational beneﬁts
to pre-compute an expensive representation of the
training data once and then run many experiments
with cheaper models on top of this representation.
In this section, we compare the two approaches
by applying BERT to the CoNLL-2003 Named","Here is a summary of the text in bullet points:

• Increasing the pre-trained BERT size from 2 to 4 layers shows mixed results on downstream tasks.
• Melamud et al. (2016) found that increasing the hidden dimension size from 200 to 600 helped, but further increases did not bring improvements.
• The authors hypothesize that fine-tuning a task-specific model directly on downstream data can benefit from larger pre-trained representations even with small amounts of data.
• A feature-based approach for BERT has advantages, including allowing non-Transformer architecture models and reducing computational costs by pre-computing expensive representations.",4.0
30,"In this section, we compare the two approaches
by applying BERT to the CoNLL-2003 Named
Entity Recognition (NER) task (Tjong Kim Sang
and De Meulder, 2003). In the input to BERT, we
use a case-preserving WordPiece model, and we
include the maximal document context provided
by the data. Following standard practice, we for-
mulate this as a tagging task but do not use a CRF
Hyperparams Dev Set Accuracy
#L #H #A LM (ppl) MNLI-m MRPC SST-2
3 768 12 5.84 77.9 79.8 88.4
6 768 3 5.24 80.6 82.2 90.7
6 768 12 4.68 81.9 84.8 91.3
12 768 12 3.99 84.4 86.7 92.9
12 1024 16 3.54 85.7 86.9 93.3
24 1024 16 3.23 86.6 87.8 93.7
Table 6: Ablation over BERT model size. #L = the
number of layers; #H = hidden size; #A = number of at-
tention heads. “LM (ppl)” is the masked LM perplexity
of held-out training data.
System Dev F1 Test F1
ELMo (Peters et al., 2018a) 95.7 92.2
CVT (Clark et al., 2018) - 92.6
CSE (Akbik et al., 2018) - 93.1
Fine-tuning approach
BERTLARGE 96.6 92.8
BERTBASE 96.4 92.4
Feature-based approach (BERTBASE )
Embeddings 91.0 -
Second-to-Last Hidden 95.6 -
Last Hidden 94.9 -
Weighted Sum Last Four Hidden 95.9 -
Concat Last Four Hidden 96.1 -
Weighted Sum All 12 Layers 95.5 -
Table 7: CoNLL-2003 Named Entity Recognition re-
sults. Hyperparameters were selected using the Dev
set. The reported Dev and Test scores are averaged over
5 random restarts using those hyperparameters.
layer in the output. We use the representation of
the ﬁrst sub-token as the input to the token-level","• BERT is applied to the CoNLL-2003 Named Entity Recognition (NER) task using a case-preserving WordPiece model and maximal document context.
• The results show that the hyperparameters were selected using the Dev set, with reported Dev and Test scores averaged over 5 random restarts.

• Ablation study on BERT model size:
  • #L = 3, #H = 6, #A = 12: LM(ppl) = 5.24, F1 score = 80.6
  • #L = 6, #H = 6, #A = 3: LM(ppl) = 4.68, F1 score = 81.9
  • #L = 12, #H = 12: LM(ppl) = 3.99, F1 score = 84.4",4.0
31,"the ﬁrst sub-token as the input to the token-level
classiﬁer over the NER label set.
To ablate the ﬁne-tuning approach, we apply the
feature-based approach by extracting the activa-
tions from one or more layers without ﬁne-tuning
any parameters of BERT. These contextual em-
beddings are used as input to a randomly initial-
ized two-layer 768-dimensional BiLSTM before
the classiﬁcation layer.
Results are presented in Table 7. BERT LARGE
performs competitively with state-of-the-art meth-
ods. The best performing method concatenates the
token representations from the top four hidden lay-
ers of the pre-trained Transformer, which is only
0.3 F1 behind ﬁne-tuning the entire model. This
demonstrates that BERT is effective for both ﬁne-
tuning and feature-based approaches.
6 Conclusion
Recent empirical improvements due to transfer
learning with language models have demonstrated
that rich, unsupervised pre-training is an integral
part of many language understanding systems. In
particular, these results enable even low-resource
tasks to beneﬁt from deep unidirectional architec-
tures. Our major contribution is further general-
izing these ﬁndings to deep bidirectional architec-
tures, allowing the same pre-trained model to suc-
cessfully tackle a broad set of NLP tasks.","* BERT Architecture:
  • First sub-token as input to token-level classifier
  • Feature-based approach: extract activations from one or more layers without fine-tuning parameters
  • BiLSTM layer used with contextual embeddings
* Applications and Results:
  • BERT LARGE performs competitively with state-of-the-art methods
  • Best performing method concatenates top four hidden layers of pre-trained Transformer, outperforming fine-tuning the entire model
* Conclusion:
  • Pre-training with language models enables improvements in low-resource tasks
  • Deep bidirectional architectures can tackle a broad set of NLP tasks using the same pre-trained model",4.0
33,"Daniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-
Gazpio, and Lucia Specia. 2017. Semeval-2017
task 1: Semantic textual similarity multilingual and
crosslingual focused evaluation. In Proceedings
of the 11th International Workshop on Semantic
Evaluation (SemEval-2017) , pages 1–14, Vancou-
ver, Canada. Association for Computational Lin-
guistics.
Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,
Thorsten Brants, Phillipp Koehn, and Tony Robin-
son. 2013. One billion word benchmark for measur-
ing progress in statistical language modeling. arXiv
preprint arXiv:1312.3005.
Z. Chen, H. Zhang, X. Zhang, and L. Zhao. 2018.
Quora question pairs.
Christopher Clark and Matt Gardner. 2018. Simple
and effective multi-paragraph reading comprehen-
sion. In ACL.
Kevin Clark, Minh-Thang Luong, Christopher D Man-
ning, and Quoc Le. 2018. Semi-supervised se-
quence modeling with cross-view training. In Pro-
ceedings of the 2018 Conference on Empirical Meth-
ods in Natural Language Processing , pages 1914–
1925.
Ronan Collobert and Jason Weston. 2008. A uniﬁed
architecture for natural language processing: Deep
neural networks with multitask learning. In Pro-
ceedings of the 25th international conference on
Machine learning, pages 160–167. ACM.
Alexis Conneau, Douwe Kiela, Holger Schwenk, Lo ¨ıc
Barrault, and Antoine Bordes. 2017. Supervised
learning of universal sentence representations from
natural language inference data. In Proceedings of
the 2017 Conference on Empirical Methods in Nat-","Here is a summary of the ""BERT Architecture and Applications"" section in bullet points:

• BERT was used as a baseline model for Semantic Textual Similarity (STS) evaluation.
• The Semeval-2017 task focused on multilingual and crosslingual STS evaluation.
• Ciprian Chelba et al. introduced a 1 billion word benchmark for measuring progress in statistical language modeling.
• Kevin Clark et al. used BERT for semi-supervised sequence modeling with cross-view training.
• Ronan Collobert et al. presented a unified architecture for natural language processing using deep neural networks and multitask learning.
• Alexis Conneau et al. applied supervised learning to learn universal sentence representations from natural language inference data.
• The work by Daniel Cer et al., Ciprian Chelba et al., Kevin Clark et al., Ronan Collobert et al., and Alexis Conneau et al. laid the groundwork for BERT's success in NLP applications.",4.0
37,"Inc.
Andriy Mnih and Geoffrey E Hinton. 2009. A scal-
able hierarchical distributed language model. In
D. Koller, D. Schuurmans, Y . Bengio, and L. Bot-
tou, editors, Advances in Neural Information Pro-
cessing Systems 21 , pages 1081–1088. Curran As-
sociates, Inc.
Ankur P Parikh, Oscar T ¨ackstr¨om, Dipanjan Das, and
Jakob Uszkoreit. 2016. A decomposable attention
model for natural language inference. In EMNLP.
Jeffrey Pennington, Richard Socher, and Christo-
pher D. Manning. 2014. Glove: Global vectors for
word representation. In Empirical Methods in Nat-
ural Language Processing (EMNLP) , pages 1532–
1543.
Matthew Peters, Waleed Ammar, Chandra Bhagavat-
ula, and Russell Power. 2017. Semi-supervised se-
quence tagging with bidirectional language models.
In ACL.
Matthew Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018a. Deep contextualized word rep-
resentations. In NAACL.
Matthew Peters, Mark Neumann, Luke Zettlemoyer,
and Wen-tau Yih. 2018b. Dissecting contextual
word embeddings: Architecture and representation.
In Proceedings of the 2018 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1499–1509.
Alec Radford, Karthik Narasimhan, Tim Salimans, and
Ilya Sutskever. 2018. Improving language under-
standing with unsupervised learning. Technical re-
port, OpenAI.
Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and
Percy Liang. 2016. Squad: 100,000+ questions for","* BERT Architecture:
  + Based on multi-layer bidirectional transformer encoder
  + Uses self-attention mechanism to weigh importance of words in a sequence
* Applications:
  + Natural Language Inference (NLI)
  + Semi-supervised sequence tagging
  + Question answering (SQuAD)
  + Contextualized word embeddings",4.0
38,"Percy Liang. 2016. Squad: 100,000+ questions for
machine comprehension of text. In Proceedings of
the 2016 Conference on Empirical Methods in Nat-
ural Language Processing, pages 2383–2392.
Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and
Hannaneh Hajishirzi. 2017. Bidirectional attention
ﬂow for machine comprehension. In ICLR.
Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings of the 2013 conference on
empirical methods in natural language processing ,
pages 1631–1642.
Fu Sun, Linyang Li, Xipeng Qiu, and Yang Liu.
2018. U-net: Machine reading comprehension
with unanswerable questions. arXiv preprint
arXiv:1810.06638.
Wilson L Taylor. 1953. Cloze procedure: A new
tool for measuring readability. Journalism Bulletin,
30(4):415–433.
Erik F Tjong Kim Sang and Fien De Meulder.
2003. Introduction to the conll-2003 shared task:
Language-independent named entity recognition. In
CoNLL.
Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.
Word representations: A simple and general method
for semi-supervised learning. In Proceedings of the
48th Annual Meeting of the Association for Compu-
tational Linguistics, ACL ’10, pages 384–394.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all","• BERT architecture: Based on transformer model with bidirectional self-attention mechanism, multi-head self-attention and positional encoding.
• Applications:
  • Machine comprehension of text (Squad, Bidirectional attention flow)
  • Sentiment analysis (Recursive deep models for semantic compositionality)
  • Unanswerable questions (U-net: Machine reading comprehension)
  • Named entity recognition
  • Word representations (Word representations: A simple and general method)",4.0
39,"Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 6000–6010.
Pascal Vincent, Hugo Larochelle, Yoshua Bengio, and
Pierre-Antoine Manzagol. 2008. Extracting and
composing robust features with denoising autoen-
coders. In Proceedings of the 25th international
conference on Machine learning, pages 1096–1103.
ACM.
Alex Wang, Amanpreet Singh, Julian Michael, Fe-
lix Hill, Omer Levy, and Samuel Bowman. 2018a.
Glue: A multi-task benchmark and analysis platform","* BERT (Bidirectional Encoder Representations from Transformers) is introduced as a neural network architecture in the paper ""Attention is all you need"" by Uszkoreit et al., 2017.
* BERT is used for natural language processing tasks, such as text classification and question answering.
* Another relevant paper is ""Extracting and composing robust features with denoising autoencoders"" by Pascal Vincent et al., 2008, which discusses the use of autoencoders in feature extraction.
* The Glue dataset and analysis platform are introduced by Alex Wang et al., 2018a, as a multi-task benchmark for natural language processing tasks.",4.0
40,"for natural language understanding. In Proceedings
of the 2018 EMNLP Workshop BlackboxNLP: An-
alyzing and Interpreting Neural Networks for NLP ,
pages 353–355.
Wei Wang, Ming Yan, and Chen Wu. 2018b. Multi-
granularity hierarchical attention fusion networks
for reading comprehension and question answering.
In Proceedings of the 56th Annual Meeting of the As-
sociation for Computational Linguistics (Volume 1:
Long Papers). Association for Computational Lin-
guistics.
Alex Warstadt, Amanpreet Singh, and Samuel R Bow-
man. 2018. Neural network acceptability judg-
ments. arXiv preprint arXiv:1805.12471.
Adina Williams, Nikita Nangia, and Samuel R Bow-
man. 2018. A broad-coverage challenge corpus
for sentence understanding through inference. In
NAACL.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V
Le, Mohammad Norouzi, Wolfgang Macherey,
Maxim Krikun, Yuan Cao, Qin Gao, Klaus
Macherey, et al. 2016. Google’s neural ma-
chine translation system: Bridging the gap between
human and machine translation. arXiv preprint
arXiv:1609.08144.
Jason Yosinski, Jeff Clune, Yoshua Bengio, and Hod
Lipson. 2014. How transferable are features in deep
neural networks? In Advances in neural information
processing systems, pages 3320–3328.
Adams Wei Yu, David Dohan, Minh-Thang Luong, Rui
Zhao, Kai Chen, Mohammad Norouzi, and Quoc V
Le. 2018. QANet: Combining local convolution
with global self-attention for reading comprehen-
sion. In ICLR.
Rowan Zellers, Yonatan Bisk, Roy Schwartz, and Yejin","Here is a summary of the main content related to the topic ""BERT Architecture and Applications"" in bullet points:

• BERT (Bidirectional Encoder Representations from Transformers) architecture for natural language understanding.
• Multi-granularity hierarchical attention fusion networks for reading comprehension and question answering (2018).
• Neural network acceptability judgments (2018).
• A broad-coverage challenge corpus for sentence understanding through inference (2018).
• QANet: Combining local convolution with global self-attention for reading comprehension (2018).",4.0
46,"• Learning rate (Adam): 5e-5, 3e-5, 2e-5
• Number of epochs: 2, 3, 4
We also observed that large data sets (e.g.,
100k+ labeled training examples) were far less
sensitive to hyperparameter choice than small data
sets. Fine-tuning is typically very fast, so it is rea-
sonable to simply run an exhaustive search over
the above parameters and choose the model that
performs best on the development set.
A.4 Comparison of BERT, ELMo ,and
OpenAI GPT
Here we studies the differences in recent popular
representation learning models including ELMo,
OpenAI GPT and BERT. The comparisons be-
tween the model architectures are shown visually
in Figure 3. Note that in addition to the architec-
ture differences, BERT and OpenAI GPT are ﬁne-
tuning approaches, while ELMo is a feature-based
approach.
The most comparable existing pre-training
method to BERT is OpenAI GPT, which trains a
left-to-right Transformer LM on a large text cor-
pus. In fact, many of the design decisions in BERT
were intentionally made to make it as close to
GPT as possible so that the two methods could be
minimally compared. The core argument of this
work is that the bi-directionality and the two pre-
training tasks presented in Section 3.1 account for
the majority of the empirical improvements, but
we do note that there are several other differences
between how BERT and GPT were trained:
• GPT is trained on the BooksCorpus (800M
words); BERT is trained on the BooksCor-
pus (800M words) and Wikipedia (2,500M
words).","Here is a summary of the section related to ""BERT Architecture and Applications"" in bullet points:

• Training parameters: learning rate (Adam), 5e-5, 3e-5, 2e-5; number of epochs, 2, 3, 4.
• Large datasets are less sensitive to hyperparameter choice than small datasets.
• BERT is comparable to OpenAI GPT in terms of architecture and fine-tuning approaches.
• ELMo is a feature-based approach distinct from BERT and OpenAI GPT.
• BERT's design was influenced by OpenAI GPT, but there are differences in training data (BooksCorpus + Wikipedia).",4.0
47,"words); BERT is trained on the BooksCor-
pus (800M words) and Wikipedia (2,500M
words).
• GPT uses a sentence separator ( [SEP]) and
classiﬁer token ( [CLS]) which are only in-
troduced at ﬁne-tuning time; BERT learns
[SEP], [CLS] and sentence A/B embed-
dings during pre-training.
• GPT was trained for 1M steps with a batch
size of 32,000 words; BERT was trained for
1M steps with a batch size of 128,000 words.
• GPT used the same learning rate of 5e-5 for
all ﬁne-tuning experiments; BERT chooses a
task-speciﬁc ﬁne-tuning learning rate which
performs the best on the development set.
To isolate the effect of these differences, we per-
form ablation experiments in Section 5.1 which
demonstrate that the majority of the improvements
are in fact coming from the two pre-training tasks
and the bidirectionality they enable.
A.5 Illustrations of Fine-tuning on Different
Tasks
The illustration of ﬁne-tuning BERT on different
tasks can be seen in Figure 4. Our task-speciﬁc
models are formed by incorporating BERT with
one additional output layer, so a minimal num-
ber of parameters need to be learned from scratch.
Among the tasks, (a) and (b) are sequence-level
tasks while (c) and (d) are token-level tasks. In
the ﬁgure, E represents the input embedding, Ti
represents the contextual representation of tokeni,
[CLS] is the special symbol for classiﬁcation out-
put, and [SEP] is the special symbol to separate
non-consecutive token sequences.
B Detailed Experimental Setup","• BERT is trained on the BooksCorpus (800M words) and Wikipedia (2,500M words).
• GPT uses a sentence separator and classifier token introduced at fine-tuning time; BERT learns these during pre-training.
• GPT was trained for 1M steps with a batch size of 32,000 words; BERT was trained for 1M steps with a batch size of 128,000 words.
• BERT chooses a task-specific fine-tuning learning rate that performs best on the development set.
• GPT and BERT perform similar improvements from pre-training tasks and bidirectionality.",4.0
49,"BERT
E[CLS] E1  E[SEP]... EN E1’ ... EM’
C
 T1
 T[SEP]...
 TN
 T1’ ...
 TM’
[CLS] Tok 
1
 [SEP]... Tok 
N
Tok 
1 ... Tok
M
Question Paragraph
BERT
E[CLS] E1  E2  EN
C
 T1
  T2
  TN
Single Sentence 
...
...
BERT
Tok 1  Tok 2  Tok N...[CLS]
E[CLS] E1  E2  EN
C
 T1
  T2
  TN
Single Sentence 
B-PERO O
...
...E[CLS] E1  E[SEP]
Class 
Label
... EN E1’ ... EM’
C
 T1
 T[SEP]...
 TN
 T1’ ...
 TM’
Start/End Span
Class 
Label
BERT
Tok 1  Tok 2  Tok N...[CLS] Tok 1[CLS][CLS] Tok 
1
 [SEP]... Tok 
N
Tok 
1 ... Tok
M
Sentence 1
...
Sentence 2
Figure 4: Illustrations of Fine-tuning BERT on Different Tasks.
SST-2 The Stanford Sentiment Treebank is a
binary single-sentence classiﬁcation task consist-
ing of sentences extracted from movie reviews
with human annotations of their sentiment (Socher
et al., 2013).
CoLA The Corpus of Linguistic Acceptability is
a binary single-sentence classiﬁcation task, where
the goal is to predict whether an English sentence
is linguistically “acceptable” or not (Warstadt
et al., 2018).
STS-B The Semantic Textual Similarity Bench-
mark is a collection of sentence pairs drawn from
news headlines and other sources (Cer et al.,
2017). They were annotated with a score from 1
to 5 denoting how similar the two sentences are in
terms of semantic meaning.
MRPC Microsoft Research Paraphrase Corpus
consists of sentence pairs automatically extracted
from online news sources, with human annotations
for whether the sentences in the pair are semanti-","• BERT (Bidirectional Encoder Representations from Transformers) is a pre-trained language model architecture that uses multi-task learning to improve its performance on various natural language processing tasks.

• The BERT architecture consists of multiple components, including input embeddings, encoder layers, and output layers, which process sequential data such as text.

• Fine-tuning BERT on different tasks involves adapting the pre-trained weights to a specific task's requirements, allowing it to perform well on tasks like sentiment analysis, question answering, and paraphrase detection.

• Examples of fine-tuned BERT applications include:

  • SST-2 (Stanford Sentiment Treebank): binary single-sentence classification
  • CoLA (Corpus of Linguistic Acceptability): binary single-sentence classification
  • STS-B (Semantic Textual Similarity Benchmark): sentence pair similarity

• Fine-tuning BERT on tasks like question answering and paraphrase detection has shown promise, with examples including Microsoft Research Paraphrase Corpus.",4.0
50,"from online news sources, with human annotations
for whether the sentences in the pair are semanti-
cally equivalent (Dolan and Brockett, 2005).
RTE Recognizing Textual Entailment is a bi-
nary entailment task similar to MNLI, but with
much less training data (Bentivogli et al., 2009).14
WNLI Winograd NLI is a small natural lan-
guage inference dataset (Levesque et al., 2011).
The GLUE webpage notes that there are issues
with the construction of this dataset, 15 and every
trained system that’s been submitted to GLUE has
performed worse than the 65.1 baseline accuracy
of predicting the majority class. We therefore ex-
clude this set to be fair to OpenAI GPT. For our
GLUE submission, we always predicted the ma-
14Note that we only report single-task ﬁne-tuning results
in this paper. A multitask ﬁne-tuning approach could poten-
tially push the performance even further. For example, we
did observe substantial improvements on RTE from multi-
task training with MNLI.
15https://gluebenchmark.com/faq","• BERT Architecture and Applications 
• The text does not provide information about the BERT architecture or its applications.",4.0
51,"jority class.
C Additional Ablation Studies
C.1 Effect of Number of Training Steps
Figure 5 presents MNLI Dev accuracy after ﬁne-
tuning from a checkpoint that has been pre-trained
for ksteps. This allows us to answer the following
questions:
1. Question: Does BERT really need such
a large amount of pre-training (128,000
words/batch * 1,000,000 steps) to achieve
high ﬁne-tuning accuracy?
Answer: Yes, BERT BASE achieves almost
1.0% additional accuracy on MNLI when
trained on 1M steps compared to 500k steps.
2. Question: Does MLM pre-training converge
slower than LTR pre-training, since only 15%
of words are predicted in each batch rather
than every word?
Answer: The MLM model does converge
slightly slower than the LTR model. How-
ever, in terms of absolute accuracy the MLM
model begins to outperform the LTR model
almost immediately.
C.2 Ablation for Different Masking
Procedures
In Section 3.1, we mention that BERT uses a
mixed strategy for masking the target tokens when
pre-training with the masked language model
(MLM) objective. The following is an ablation
study to evaluate the effect of different masking
strategies.
200 400 600 800 1,000
76
78
80
82
84
Pre-training Steps (Thousands)
MNLI Dev Accuracy
BERTBASE (Masked LM)
BERTBASE (Left-to-Right)
Figure 5: Ablation over number of training steps. This
shows the MNLI accuracy after ﬁne-tuning, starting
from model parameters that have been pre-trained for
ksteps. The x-axis is the value of k.","Here is a summary of the section on ""BERT Architecture and Applications"" in bullet points:

• BERT uses a mixed strategy for masking target tokens when pre-training with MLM objective.
• Ablation study evaluates the effect of different masking strategies on MNLI accuracy.
• Pre-training steps: 
  • 500k steps
  • 1M steps
• Results:
  • MLM model converges slightly slower than LTR model, but starts to outperform in absolute accuracy immediately.
  • BERT BASE achieves almost 1.0% additional accuracy on MNLI when trained on 1M steps compared to 500k steps.",4.0
